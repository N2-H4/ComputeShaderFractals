#pragma kernel CSMain

//result texture
RWTexture2D<float4> Destination;

//transform matrices for ray marching
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _LightDirection;

//fractal coefficients
float Scale = 2.0f;
float foldingLimit = 1.0f;
float minRadius2 = 2.0f;
float fixedRadius2 = 5.5f;
float epsilon;
static const float maxDst = 1000;
static const int maxStepCount = 300;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    //create ray from origin in given direction
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    //calculate ray position and drection based on coords of pixel on screen using transform matrices
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

void sphereFold(inout float3 z, inout float dz)
{
    float r2 = dot(z, z);
    if (r2 < minRadius2) {
        // linear inner scaling
        float temp = (fixedRadius2 / minRadius2);
        z *= temp;
        dz *= temp;
    }
    else if (r2 < fixedRadius2) {
        // this is the actual sphere inversion
        float temp = (fixedRadius2 / r2);
        z *= temp;
        dz *= temp;
    }
}

void boxFold(inout float3 z, inout float dz)
{
    z = clamp(z, -foldingLimit, foldingLimit) * 2.0 - z;
}

float SceneInfo(float3 z)
{
    float3 offset = z;
    float dr = 1.0;
    for (int n = 0; n < 50; n++) {
        boxFold(z, dr);       // Reflect
        sphereFold(z, dr);    // Sphere Inversion

        z = Scale * z + offset;  // Scale & Translate
        dr = dr * abs(Scale) + 1.0;
    }
    float r = length(z);
    return r / abs(dr);
}



float3 EstimateNormal(float3 p) {
    //find normal of surface of fractal
    float x = SceneInfo(float3(p.x + epsilon, p.y, p.z)) - SceneInfo(float3(p.x - epsilon, p.y, p.z));
    float y = SceneInfo(float3(p.x, p.y + epsilon, p.z)) - SceneInfo(float3(p.x, p.y - epsilon, p.z));
    float z = SceneInfo(float3(p.x, p.y, p.z + epsilon)) - SceneInfo(float3(p.x, p.y, p.z - epsilon));
    return normalize(float3(x, y, z));
}

[numthreads(32, 32, 1)] //kernel will be run in clusters of size 16x16 threads
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float3 colourAMix = float3(0.38f, 0.28f, 1.0f);
    float3 colourBMix = float3(1.0f, 0.0f, 0.0f);
    float blackAndWhite = 0;
    float darkness = 20;
    //get dimensions of output texture
    uint width, height;
    Destination.GetDimensions(width, height);

    //find coords of point wrom which ray will be shoot
    float2 uv = id.xy / float2(width, height);

    // Background gradient
    float4 result = lerp(float4(51, 3, 20, 1), float4(16, 6, 28, 1), uv.y) / 255.0;

    //create ray
    Ray ray = CreateCameraRay(uv * 2 - 1);
    float rayDst = 0;
    int marchSteps = 0;

    //march ray until it hits surface or max steps or max distance is reached
    while (rayDst < maxDst && marchSteps < maxStepCount) {
        marchSteps++;
        float2 sceneInfo = SceneInfo(ray.origin);
        float dst = sceneInfo.y;

        // Ray has hit a surface
        if (dst <= epsilon) {
            float escapeIterations = sceneInfo.x;
            float3 normal = EstimateNormal(ray.origin - ray.direction * epsilon * 2);

            //color the pixel
            float colourA = saturate(dot(normal * .1 + .3, -_LightDirection));
            float colourB = saturate(escapeIterations / 16.0);
            float3 colourMix = saturate(colourA * colourAMix + colourB * colourBMix);

            result = float4(colourMix.xyz, 1);
            break;
        }
        ray.origin += ray.direction * dst;
        rayDst += dst;
    }

    //write color to output texture
    float rim = (marchSteps / darkness)*0.5f;
    Destination[id.xy] = lerp(result, 1, blackAndWhite)*rim;

}