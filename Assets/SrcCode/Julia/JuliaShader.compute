// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result; //shader where results of calculations will be put

//Data struct identical to one in c# script
struct Data
{
	double w, h, i, r;
	double cReal, cImag;
	int screenWidth, screenHeight;
};

StructuredBuffer<Data> buffer; //Compute buffer
uint maxIterations; //number of max iterations passed from c# script

[numthreads(32, 32, 1)] //kernel will run on shader clusters of size 32x32
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//main function of shader, id variable contains id of thread that shader is run on, id contains 3 uint coresponding to pixel position on screen
	double real, imag;
	double real2, imag2;
	//id.x and id.y are positions of pixel on screen
	double xOffset = (double)id.x / buffer[0].screenWidth * buffer[0].w;
	double yOffset = (double)id.y / buffer[0].screenHeight * buffer[0].h;
	uint iterationCount;
	float4 color = { 0.0f,0.0f,0.0f,1.0f };
	real = buffer[0].r + xOffset;
	imag = buffer[0].i + yOffset;

	//point on complex plane will be squared until it goes to far from origin or we reach max iteration count
	for (uint i = 0; i < maxIterations; i++)
	{
		real2 = real * real;
		imag2 = imag * imag;

		if (real2 + imag2 > 4)
		{
			break;
		}
		else
		{
			imag = 2.0 * real * imag + buffer[0].cImag;
			real = real2 - imag2 + buffer[0].cReal;
			iterationCount++;
		}
	}

	//point will be assigned a color depending on numbers of iterations it needed to escape 2-unit circle around origin
	if (iterationCount != maxIterations)
	{
		int colorNr = iterationCount % 16;

		switch (colorNr)
		{
		case 0:
		{
			color[0] = 66.0f / 255.0f;
			color[1] = 30.0f / 255.0f;
			color[2] = 15.0f / 255.0f;

			break;
		}
		case 1:
		{
			color[0] = 25.0f / 255.0f;
			color[1] = 7.0f / 255.0f;
			color[2] = 26.0f / 255.0f;
			break;
		}
		case 2:
		{
			color[0] = 9.0f / 255.0f;
			color[1] = 1.0f / 255.0f;
			color[2] = 47.0f / 255.0f;
			break;
		}

		case 3:
		{
			color[0] = 4.0f / 255.0f;
			color[1] = 4.0f / 255.0f;
			color[2] = 73.0f / 255.0f;
			break;
		}
		case 4:
		{
			color[0] = 0.0f / 255.0f;
			color[1] = 7.0f / 255.0f;
			color[2] = 100.0f / 255.0f;
			break;
		}
		case 5:
		{
			color[0] = 12.0f / 255.0f;
			color[1] = 44.0f / 255.0f;
			color[2] = 138.0f / 255.0f;
			break;
		}
		case 6:
		{
			color[0] = 24.0f / 255.0f;
			color[1] = 82.0f / 255.0f;
			color[2] = 177.0f / 255.0f;
			break;
		}
		case 7:
		{
			color[0] = 57.0f / 255.0f;
			color[1] = 125.0f / 255.0f;
			color[2] = 209.0f / 255.0f;
			break;
		}
		case 8:
		{
			color[0] = 134.0f / 255.0f;
			color[1] = 181.0f / 255.0f;
			color[2] = 229.0f / 255.0f;
			break;
		}
		case 9:
		{
			color[0] = 211.0f / 255.0f;
			color[1] = 236.0f / 255.0f;
			color[2] = 248.0f / 255.0f;
			break;
		}
		case 10:
		{
			color[0] = 241.0f / 255.0f;
			color[1] = 233.0f / 255.0f;
			color[2] = 191.0f / 255.0f;
			break;
		}
		case 11:
		{
			color[0] = 248.0f / 255.0f;
			color[1] = 201.0f / 255.0f;
			color[2] = 95.0f / 255.0f;
			break;
		}
		case 12:
		{
			color[0] = 255.0f / 255.0f;
			color[1] = 170.0f / 255.0f;
			color[2] = 0.0f / 255.0f;
			break;
		}
		case 13:
		{
			color[0] = 204.0f / 255.0f;
			color[1] = 128.0f / 255.0f;
			color[2] = 0.0f / 255.0f;
			break;
		}
		case 14:
		{
			color[0] = 153.0f / 255.0f;
			color[1] = 87.0f / 255.0f;
			color[2] = 0.0f / 255.0f;
			break;
		}
		case 15:
		{
			color[0] = 106.0f / 255.0f;
			color[1] = 52.0f / 255.0f;
			color[2] = 3.0f / 255.0f;
			break;
		}

		}
	}

	//put calculated color value inside result texture
	Result[id.xy] = color;
}
