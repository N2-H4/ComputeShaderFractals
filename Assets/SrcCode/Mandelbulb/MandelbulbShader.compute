#pragma kernel CSMain

RWTexture2D<float4> Destination; //output texture

//transform matrices for raymarching
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _LightDirection;

//fractal coefficients
float power;
float darkness;
float blackAndWhite;
float3 colourAMix;
float3 colourBMix;
float epsilon = 0.000001f;
static const float maxDst = 500;
static const int maxStepCount = 9000;

struct Ray 
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) 
{
    //create ray from origin with given direction
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) 
{
    //get ray position in world by multiplaing vectors by invers matrices
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

float2 SceneInfo(float3 position) 
{
    //calculate distance from fractal
    float3 z = position;
    float dr = 1.0f;
    float r = 0.0f;
    int iterations = 0;

    for (int i = 0; i < 50; i++) {
        iterations = i;
        r = length(z);

        if (r > 2) {
            break;
        }

        // convert to polar coordinates
        float theta = acos(z.z / r);
        float phi = atan2(z.y, z.x);
        dr = pow(r, power - 1.0) * power * dr + 1.0;

        // scale and rotate the point
        float zr = pow(r, power);
        theta = theta * power;
        phi = phi * power;

        // convert back to cartesian coordinates
        z = zr * float3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));
        z += position;
    }
    float dst = 0.5 * log(r) * r / dr;
    return float2(iterations, dst);
}

float3 EstimateNormal(float3 p) 
{
    //get normal of surface hit by ray
    float x = SceneInfo(float3(p.x + epsilon, p.y, p.z)).y - SceneInfo(float3(p.x - epsilon, p.y, p.z)).y;
    float y = SceneInfo(float3(p.x, p.y + epsilon, p.z)).y - SceneInfo(float3(p.x, p.y - epsilon, p.z)).y;
    float z = SceneInfo(float3(p.x, p.y, p.z + epsilon)).y - SceneInfo(float3(p.x, p.y, p.z - epsilon)).y;
    return normalize(float3(x, y, z));
}

[numthreads(16, 16, 1)] //kernel will run on cluster of threads of size 16x16
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //get dimensions of output texture
    uint width, height;
    Destination.GetDimensions(width, height);

    //coords from which ray will fire
    float2 uv = id.xy / float2(width, height);

    //Background gradient
    float4 result = lerp(float4(51, 3, 20, 1), float4(16, 6, 28, 1), uv.y) / 255.0;

    //create ray
    Ray ray = CreateCameraRay(uv * 2 - 1);
    float rayDst = 0;
    int marchSteps = 0;

    //march ray until it hits surface or runs out of steps or reaches max distance
    while (rayDst < maxDst && marchSteps < maxStepCount) {
        marchSteps++;
        float2 sceneInfo = SceneInfo(ray.origin);
        float dst = sceneInfo.y;

        // Ray has hit a surface
        if (dst <= epsilon) {
            float escapeIterations = sceneInfo.x;
            float3 normal = EstimateNormal(ray.origin - ray.direction * epsilon * 2);

            //color the pixel
            float colourA = saturate(dot(normal * .5 + .5, -_LightDirection));
            float colourB = saturate(escapeIterations / 16.0);
            float3 colourMix = saturate(colourA * colourAMix + colourB * colourBMix);

            result = float4(colourMix.xyz, 1);
            break;
        }
        ray.origin += ray.direction * dst;
        rayDst += dst;
    }

    float rim = marchSteps / darkness;
    //write color to texture
    Destination[id.xy] = lerp(result, 1, blackAndWhite) * rim;
}