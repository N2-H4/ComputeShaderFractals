// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> startingPoints;
RWTexture2D<float4> Result;

struct Data
{
    float aCoff, bCoff, cCoff, dCoff, eCoff, fCoff;
};

StructuredBuffer<Data> buffer;

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float x, y;
    int bufferIndex = id.x * 32 + id.y;
    x = startingPoints.Load(id.xy).x;
    y = startingPoints.Load(id.xy).y;
    for (int i = 0; i < 25; i++)
    {
        x = buffer[bufferIndex].aCoff * x + buffer[bufferIndex].bCoff * y + buffer[bufferIndex].cCoff;
        y = buffer[bufferIndex].dCoff * x + buffer[bufferIndex].eCoff * y + buffer[bufferIndex].fCoff;
    }
    Result[id.xy] = float4(x, y, 0.0f, 1.0f);
    
}
