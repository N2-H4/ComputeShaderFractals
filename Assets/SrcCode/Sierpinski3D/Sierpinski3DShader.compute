#pragma kernel CSMain

//result texture
RWTexture2D<float4> Destination;

//transform matrices for ray marching
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _LightDirection;

//fractal coefficients
float darkness;
float blackAndWhite;
float3 colourAMix;
float3 colourBMix;
float epsilon;
static const float maxDst = 500;
static const int maxStepCount = 300;

struct Ray 
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) 
{
    //create ray from origin in given direction
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) 
{
    //calculate ray position and drection based on coords of pixel on screen using transform matrices
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}


float2 SceneInfo(float3 z)
{
    //calculate distance of fractal from given point in space
    float3 a1 = float3(1, 1, 1);
    float3 a2 = float3(-1, -1, 1);
    float3 a3 = float3(1, -1, -1);
    float3 a4 = float3(-1, 1, -1);
    float3 c;
    int n = 0;
    float dist, d;
    float Scale = 2.0f;
    while (n < 30) {
        c = a1; dist = length(z - a1);
        d = length(z - a2); if (d < dist) { c = a2; dist = d; }
        d = length(z - a3); if (d < dist) { c = a3; dist = d; }
        d = length(z - a4); if (d < dist) { c = a4; dist = d; }
        z = Scale * z - c * (Scale - 1.0);
        n++;
    }

    return float2(n,length(z) * pow(Scale, float(-n)));
}



float3 EstimateNormal(float3 p) {
    //find normal of surface of fractal
    float x = SceneInfo(float3(p.x + epsilon, p.y, p.z)).y - SceneInfo(float3(p.x - epsilon, p.y, p.z)).y;
    float y = SceneInfo(float3(p.x, p.y + epsilon, p.z)).y - SceneInfo(float3(p.x, p.y - epsilon, p.z)).y;
    float z = SceneInfo(float3(p.x, p.y, p.z + epsilon)).y - SceneInfo(float3(p.x, p.y, p.z - epsilon)).y;
    return normalize(float3(x, y, z));
}

[numthreads(16, 16, 1)] //kernel will be run in clusters of size 16x16 threads
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //get dimensions of output texture
    uint width, height;
    Destination.GetDimensions(width, height);

    //find coords of point wrom which ray will be shoot
    float2 uv = id.xy / float2(width, height);

    // Background gradient
    float4 result = lerp(float4(51, 3, 20, 1), float4(16, 6, 28, 1), uv.y) / 255.0;

    //create ray
    Ray ray = CreateCameraRay(uv * 2 - 1);
    float rayDst = 0;
    int marchSteps = 0;

    //march ray until it hits surface or max steps or max distance is reached
    while (rayDst < maxDst && marchSteps < maxStepCount) {
        marchSteps++;
        float2 sceneInfo = SceneInfo(ray.origin);
        float dst = sceneInfo.y;

        // Ray has hit a surface
        if (dst <= epsilon) {
            float escapeIterations = sceneInfo.x;
            float3 normal = EstimateNormal(ray.origin - ray.direction * epsilon * 2);

            //color the pixel
            float colourA = saturate(dot(normal * .5 + .5, -_LightDirection));
            float colourB = saturate(escapeIterations / 16.0);
            float3 colourMix = saturate(colourA * colourAMix + colourB * colourBMix);

            result = float4(colourMix.xyz, 1);
            break;
        }
        ray.origin += ray.direction * dst;
        rayDst += dst;
    }

    //write color to output texture
    float rim = marchSteps / darkness;
    Destination[id.xy] = lerp(result, 1, blackAndWhite) * rim;

}